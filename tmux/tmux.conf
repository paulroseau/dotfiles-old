unbind-key C-b
set-option -g prefix C-a
bind-key -r -T prefix C-a send-prefix

# Key binding to toogle vim like window key mappings (disabling is useful when inside vim)
is_vim_mode_on="[ $(tmux show-option -wv @vim_mode) = \"on\" ]"
disable_vim_mode="set-option -w @vim_mode \"off\""
enable_vim_mode="set-option -w @vim_mode \"on\""
bind-key -T root "M-\\" if-shell "$is_vim_mode_on" "$disable_vim_mode" "$enable_vim_mode"

# Copy mode
set-option copy-command "xclip -selection clipboard"
set-option -wg mode-keys "vi"
unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe
bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel

# Work on config
bind-key -T prefix r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Session navigation
bind-key -T prefix N command-prompt 'new-session -s "%1"'
bind-key -T prefix R command-prompt 'rename-session "%1"'
bind-key -T prefix K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'
bind-key -T prefix t choose-tree
bind-key -T prefix C-t choose-tree
bind-key -T prefix s choose-tree -s
bind-key -T prefix C-s choose-tree -s

# Window navigation
set-option -g renumber-windows
bind-key -T root C-h previous-window
bind-key -T root C-l next-window
bind-key -T prefix C-l send-keys C-l # to allow to clear shell
bind-key -T prefix l send-keys C-l # to allow to clear shell
bind-key -T prefix C-c new-window -c '#{pane_current_path}'

# Pane navigation
bind-key -T root M-z resize-pane -Z
bind-key -T root M-N next-layout
bind-key -T root M-P previous-layout

bind-key -T root M-h if-shell "$is_vim_mode_on" "send-keys M-h" "select-pane -L"
bind-key -T root M-j if-shell "$is_vim_mode_on" "send-keys M-j" "select-pane -D"
bind-key -T root M-k if-shell "$is_vim_mode_on" "send-keys M-k" "select-pane -U"
bind-key -T root M-l if-shell "$is_vim_mode_on" "send-keys M-l" "select-pane -R"
bind-key -T root M-< if-shell "$is_vim_mode_on" "send-keys M-<" "resize-pane -L"
bind-key -T root M-> if-shell "$is_vim_mode_on" "send-keys M->" "resize-pane -R"
bind-key -T root M-+ if-shell "$is_vim_mode_on" "send-keys M-+" "resize-pane -U"
bind-key -T root M-- if-shell "$is_vim_mode_on" "send-keys M--" "resize-pane -D"
bind-key -T root M-s if-shell "$is_vim_mode_on" "send-keys M-s" "split-pane -v -c '#{pane_current_path}'"
bind-key -T root M-n if-shell "$is_vim_mode_on" "send-keys M-n" "split-pane -v -c '#{pane_current_path}'"
bind-key -T root M-v if-shell "$is_vim_mode_on" "send-keys M-v" "split-pane -h -c '#{pane_current_path}'"
bind-key -T root M-x if-shell "$is_vim_mode_on" "send-keys M-x" "swap-pane -U"

bind-key -T copy-mode-vi M-h "select-pane -L"
bind-key -T copy-mode-vi M-j "select-pane -D"
bind-key -T copy-mode-vi M-k "select-pane -U"
bind-key -T copy-mode-vi M-l "select-pane -R"
bind-key -T copy-mode-vi M-< "resize-pane -L"
bind-key -T copy-mode-vi M-> "resize-pane -R"
bind-key -T copy-mode-vi M-+ "resize-pane -U"
bind-key -T copy-mode-vi M-- "resize-pane -D"
bind-key -T copy-mode-vi M-s "split-pane -v -c '#{pane_current_path}'"
bind-key -T copy-mode-vi M-n "split-pane -v -c '#{pane_current_path}'"
bind-key -T copy-mode-vi M-v "split-pane -h -c '#{pane_current_path}'"
unbind-key -T copy-mode-vi C-h # by default this is set to cursor left, we want to default to previous-window defined above in the root table

# Rearrange panes
bind-key -T root C-p switch-client -T pane
bind-key -T pane t choose-tree
bind-key -T pane m choose-tree 'select-pane -m ; switch-client -t "%1" ; join-pane -t "%1"'
bind-key -T pane e choose-tree 'join-pane -t "%1"'
bind-key -T pane i choose-tree 'join-pane -s "%1"'
bind-key -T pane B break-pane
bind-key -T pane C-b break-pane -d
bind-key -T pane N {
  break-pane
  command-prompt 'new-session -d -s "%1" ; move-window -k -t "%1:0" ; switch-client -t "%1"'
}
bind-key -T pane C-n {
  break-pane
  command-prompt 'new-session -d -s "%1" ; move-window -k -t "%1:0"'
}

# Rearrange windows
bind-key -T root C-M-h {
  select-pane -m
  previous-window
  swap-window
  select-pane -M
}
bind-key -T root C-M-l {
  select-pane -m
  next-window
  swap-window
  select-pane -M
}
bind-key -T root C-q switch-client -T window
bind-key -T window t choose-tree -w
bind-key -T window m choose-tree -w {
  run-shell 'tmux switch-client -t "%1" \; move-window -a -s "#{session_name}:#{window_index}" -t "%1"'
}
bind-key -T window i choose-tree -w 'move-window -s "%1"'
bind-key -T window I choose-tree -w {
  run-shell 'tmux move-window -k -s "%1" -t "#{session_name}:#{window_index}"'
}
bind-key -T window N {
  command-prompt 'new-session -d -s "%1" ; move-window -k -t "%1:0" ; switch-client -t "%1"'
}
bind-key -T window C-n {
  command-prompt 'new-session -d -s "%1" ; move-window -k -t "%1:0"'
}

# Status bar
set-option -g status-keys "emacs"
set-option -g status-bg "#666666"
set-option -g status-fg "#aaaaaa"
set-option -g status-left-length 50
set-option -g status-right "#[fg=#333000]vim-mode: #{@vim_mode}"
